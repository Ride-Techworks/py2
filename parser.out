Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    INTERPOLATED_STR

Grammar

Rule 0     S' -> Rec
Rule 1     Rec -> Start
Rule 2     Rec -> Rec Start
Rule 3     Start -> ComandosIniciais
Rule 4     ComandosIniciais -> ESCREVER escrever ;
Rule 5     ComandosIniciais -> variavel ;
Rule 6     ComandosIniciais -> FUNCAO funcao FIM
Rule 7     ComandosIniciais -> VARIAVEL = func_call ;
Rule 8     ComandosIniciais -> VARIAVEL = ENTRADA ( ) ;
Rule 9     escrever -> ( expression )
Rule 10    variavel -> VARIAVEL = expression
Rule 11    expression -> expression_ops
Rule 12    expression -> STR
Rule 13    expression -> VARIAVEL
Rule 14    expression_ops -> expression_ops + expression_ops
Rule 15    expression_ops -> expression_ops - expression_ops
Rule 16    expression_ops -> expression_ops * expression_ops
Rule 17    expression_ops -> expression_ops / expression_ops
Rule 18    expression_ops -> expression_ops CONCAT expression_ops
Rule 19    expression_ops -> ( expression_ops )
Rule 20    expression_ops -> NUM
Rule 21    expression_ops -> STR
Rule 22    expression_ops -> VARIAVEL
Rule 23    expression_ops -> - expression_ops
Rule 24    funcao -> NAME ( arg )
Rule 25    func_call -> ALEATORIO ( expression_ops )
Rule 26    func_call -> ESCREVER ( expression_ops )
Rule 27    func_call -> ESCREVER ( STR )
Rule 28    arg -> NAME
Rule 29    arg -> NAME , arg

Terminals, with rules where they appear

(                    : 8 9 19 24 25 26 27
)                    : 8 9 19 24 25 26 27
*                    : 16
+                    : 14
,                    : 29
-                    : 15 23
/                    : 17
;                    : 4 5 7 8
=                    : 7 8 10
ALEATORIO            : 25
CONCAT               : 18
ENTRADA              : 8
ESCREVER             : 4 26 27
FIM                  : 6
FUNCAO               : 6
INTERPOLATED_STR     : 
NAME                 : 24 28 29
NUM                  : 20
STR                  : 12 21 27
VARIAVEL             : 7 8 10 13 22
error                : 

Nonterminals, with rules where they appear

ComandosIniciais     : 3
Rec                  : 2 0
Start                : 1 2
arg                  : 24 29
escrever             : 4
expression           : 9 10
expression_ops       : 11 14 14 15 15 16 16 17 17 18 18 19 23 25 26
func_call            : 7
funcao               : 6
variavel             : 5

Parsing method: LALR

state 0

    (0) S' -> . Rec
    (1) Rec -> . Start
    (2) Rec -> . Rec Start
    (3) Start -> . ComandosIniciais
    (4) ComandosIniciais -> . ESCREVER escrever ;
    (5) ComandosIniciais -> . variavel ;
    (6) ComandosIniciais -> . FUNCAO funcao FIM
    (7) ComandosIniciais -> . VARIAVEL = func_call ;
    (8) ComandosIniciais -> . VARIAVEL = ENTRADA ( ) ;
    (10) variavel -> . VARIAVEL = expression

    ESCREVER        shift and go to state 4
    FUNCAO          shift and go to state 6
    VARIAVEL        shift and go to state 7

    Rec                            shift and go to state 1
    Start                          shift and go to state 2
    ComandosIniciais               shift and go to state 3
    variavel                       shift and go to state 5

state 1

    (0) S' -> Rec .
    (2) Rec -> Rec . Start
    (3) Start -> . ComandosIniciais
    (4) ComandosIniciais -> . ESCREVER escrever ;
    (5) ComandosIniciais -> . variavel ;
    (6) ComandosIniciais -> . FUNCAO funcao FIM
    (7) ComandosIniciais -> . VARIAVEL = func_call ;
    (8) ComandosIniciais -> . VARIAVEL = ENTRADA ( ) ;
    (10) variavel -> . VARIAVEL = expression

    ESCREVER        shift and go to state 4
    FUNCAO          shift and go to state 6
    VARIAVEL        shift and go to state 7

    Start                          shift and go to state 8
    ComandosIniciais               shift and go to state 3
    variavel                       shift and go to state 5

state 2

    (1) Rec -> Start .

    ESCREVER        reduce using rule 1 (Rec -> Start .)
    FUNCAO          reduce using rule 1 (Rec -> Start .)
    VARIAVEL        reduce using rule 1 (Rec -> Start .)
    $end            reduce using rule 1 (Rec -> Start .)


state 3

    (3) Start -> ComandosIniciais .

    ESCREVER        reduce using rule 3 (Start -> ComandosIniciais .)
    FUNCAO          reduce using rule 3 (Start -> ComandosIniciais .)
    VARIAVEL        reduce using rule 3 (Start -> ComandosIniciais .)
    $end            reduce using rule 3 (Start -> ComandosIniciais .)


state 4

    (4) ComandosIniciais -> ESCREVER . escrever ;
    (9) escrever -> . ( expression )

    (               shift and go to state 10

    escrever                       shift and go to state 9

state 5

    (5) ComandosIniciais -> variavel . ;

    ;               shift and go to state 11


state 6

    (6) ComandosIniciais -> FUNCAO . funcao FIM
    (24) funcao -> . NAME ( arg )

    NAME            shift and go to state 13

    funcao                         shift and go to state 12

state 7

    (7) ComandosIniciais -> VARIAVEL . = func_call ;
    (8) ComandosIniciais -> VARIAVEL . = ENTRADA ( ) ;
    (10) variavel -> VARIAVEL . = expression

    =               shift and go to state 14


state 8

    (2) Rec -> Rec Start .

    ESCREVER        reduce using rule 2 (Rec -> Rec Start .)
    FUNCAO          reduce using rule 2 (Rec -> Rec Start .)
    VARIAVEL        reduce using rule 2 (Rec -> Rec Start .)
    $end            reduce using rule 2 (Rec -> Rec Start .)


state 9

    (4) ComandosIniciais -> ESCREVER escrever . ;

    ;               shift and go to state 15


state 10

    (9) escrever -> ( . expression )
    (11) expression -> . expression_ops
    (12) expression -> . STR
    (13) expression -> . VARIAVEL
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    STR             shift and go to state 19
    VARIAVEL        shift and go to state 20
    (               shift and go to state 16
    NUM             shift and go to state 22
    -               shift and go to state 21

    expression                     shift and go to state 17
    expression_ops                 shift and go to state 18

state 11

    (5) ComandosIniciais -> variavel ; .

    ESCREVER        reduce using rule 5 (ComandosIniciais -> variavel ; .)
    FUNCAO          reduce using rule 5 (ComandosIniciais -> variavel ; .)
    VARIAVEL        reduce using rule 5 (ComandosIniciais -> variavel ; .)
    $end            reduce using rule 5 (ComandosIniciais -> variavel ; .)


state 12

    (6) ComandosIniciais -> FUNCAO funcao . FIM

    FIM             shift and go to state 23


state 13

    (24) funcao -> NAME . ( arg )

    (               shift and go to state 24


state 14

    (7) ComandosIniciais -> VARIAVEL = . func_call ;
    (8) ComandosIniciais -> VARIAVEL = . ENTRADA ( ) ;
    (10) variavel -> VARIAVEL = . expression
    (25) func_call -> . ALEATORIO ( expression_ops )
    (26) func_call -> . ESCREVER ( expression_ops )
    (27) func_call -> . ESCREVER ( STR )
    (11) expression -> . expression_ops
    (12) expression -> . STR
    (13) expression -> . VARIAVEL
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    ENTRADA         shift and go to state 26
    ALEATORIO       shift and go to state 28
    ESCREVER        shift and go to state 29
    STR             shift and go to state 19
    VARIAVEL        shift and go to state 20
    (               shift and go to state 16
    NUM             shift and go to state 22
    -               shift and go to state 21

    func_call                      shift and go to state 25
    expression                     shift and go to state 27
    expression_ops                 shift and go to state 18

state 15

    (4) ComandosIniciais -> ESCREVER escrever ; .

    ESCREVER        reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)
    FUNCAO          reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)
    VARIAVEL        reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)
    $end            reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)


state 16

    (19) expression_ops -> ( . expression_ops )
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 30

state 17

    (9) escrever -> ( expression . )

    )               shift and go to state 33


state 18

    (11) expression -> expression_ops .
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    )               reduce using rule 11 (expression -> expression_ops .)
    ;               reduce using rule 11 (expression -> expression_ops .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    CONCAT          shift and go to state 38


state 19

    (12) expression -> STR .
    (21) expression_ops -> STR .

  ! reduce/reduce conflict for ) resolved using rule 12 (expression -> STR .)
  ! reduce/reduce conflict for ; resolved using rule 12 (expression -> STR .)
    )               reduce using rule 12 (expression -> STR .)
    ;               reduce using rule 12 (expression -> STR .)
    +               reduce using rule 21 (expression_ops -> STR .)
    -               reduce using rule 21 (expression_ops -> STR .)
    *               reduce using rule 21 (expression_ops -> STR .)
    /               reduce using rule 21 (expression_ops -> STR .)
    CONCAT          reduce using rule 21 (expression_ops -> STR .)

  ! )               [ reduce using rule 21 (expression_ops -> STR .) ]
  ! ;               [ reduce using rule 21 (expression_ops -> STR .) ]


state 20

    (13) expression -> VARIAVEL .
    (22) expression_ops -> VARIAVEL .

  ! reduce/reduce conflict for ) resolved using rule 13 (expression -> VARIAVEL .)
  ! reduce/reduce conflict for ; resolved using rule 13 (expression -> VARIAVEL .)
    )               reduce using rule 13 (expression -> VARIAVEL .)
    ;               reduce using rule 13 (expression -> VARIAVEL .)
    +               reduce using rule 22 (expression_ops -> VARIAVEL .)
    -               reduce using rule 22 (expression_ops -> VARIAVEL .)
    *               reduce using rule 22 (expression_ops -> VARIAVEL .)
    /               reduce using rule 22 (expression_ops -> VARIAVEL .)
    CONCAT          reduce using rule 22 (expression_ops -> VARIAVEL .)

  ! )               [ reduce using rule 22 (expression_ops -> VARIAVEL .) ]
  ! ;               [ reduce using rule 22 (expression_ops -> VARIAVEL .) ]


state 21

    (23) expression_ops -> - . expression_ops
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 39

state 22

    (20) expression_ops -> NUM .

    +               reduce using rule 20 (expression_ops -> NUM .)
    -               reduce using rule 20 (expression_ops -> NUM .)
    *               reduce using rule 20 (expression_ops -> NUM .)
    /               reduce using rule 20 (expression_ops -> NUM .)
    CONCAT          reduce using rule 20 (expression_ops -> NUM .)
    )               reduce using rule 20 (expression_ops -> NUM .)
    ;               reduce using rule 20 (expression_ops -> NUM .)


state 23

    (6) ComandosIniciais -> FUNCAO funcao FIM .

    ESCREVER        reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)
    FUNCAO          reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)
    VARIAVEL        reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)
    $end            reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)


state 24

    (24) funcao -> NAME ( . arg )
    (28) arg -> . NAME
    (29) arg -> . NAME , arg

    NAME            shift and go to state 40

    arg                            shift and go to state 41

state 25

    (7) ComandosIniciais -> VARIAVEL = func_call . ;

    ;               shift and go to state 42


state 26

    (8) ComandosIniciais -> VARIAVEL = ENTRADA . ( ) ;

    (               shift and go to state 43


state 27

    (10) variavel -> VARIAVEL = expression .

    ;               reduce using rule 10 (variavel -> VARIAVEL = expression .)


state 28

    (25) func_call -> ALEATORIO . ( expression_ops )

    (               shift and go to state 44


state 29

    (26) func_call -> ESCREVER . ( expression_ops )
    (27) func_call -> ESCREVER . ( STR )

    (               shift and go to state 45


state 30

    (19) expression_ops -> ( expression_ops . )
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    )               shift and go to state 46
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    CONCAT          shift and go to state 38


state 31

    (21) expression_ops -> STR .

    )               reduce using rule 21 (expression_ops -> STR .)
    +               reduce using rule 21 (expression_ops -> STR .)
    -               reduce using rule 21 (expression_ops -> STR .)
    *               reduce using rule 21 (expression_ops -> STR .)
    /               reduce using rule 21 (expression_ops -> STR .)
    CONCAT          reduce using rule 21 (expression_ops -> STR .)
    ;               reduce using rule 21 (expression_ops -> STR .)


state 32

    (22) expression_ops -> VARIAVEL .

    )               reduce using rule 22 (expression_ops -> VARIAVEL .)
    +               reduce using rule 22 (expression_ops -> VARIAVEL .)
    -               reduce using rule 22 (expression_ops -> VARIAVEL .)
    *               reduce using rule 22 (expression_ops -> VARIAVEL .)
    /               reduce using rule 22 (expression_ops -> VARIAVEL .)
    CONCAT          reduce using rule 22 (expression_ops -> VARIAVEL .)
    ;               reduce using rule 22 (expression_ops -> VARIAVEL .)


state 33

    (9) escrever -> ( expression ) .

    ;               reduce using rule 9 (escrever -> ( expression ) .)


state 34

    (14) expression_ops -> expression_ops + . expression_ops
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 47

state 35

    (15) expression_ops -> expression_ops - . expression_ops
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 48

state 36

    (16) expression_ops -> expression_ops * . expression_ops
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 49

state 37

    (17) expression_ops -> expression_ops / . expression_ops
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 50

state 38

    (18) expression_ops -> expression_ops CONCAT . expression_ops
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 51

state 39

    (23) expression_ops -> - expression_ops .
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 23 (expression_ops -> - expression_ops .)
    -               reduce using rule 23 (expression_ops -> - expression_ops .)
    *               reduce using rule 23 (expression_ops -> - expression_ops .)
    /               reduce using rule 23 (expression_ops -> - expression_ops .)
    CONCAT          reduce using rule 23 (expression_ops -> - expression_ops .)
    )               reduce using rule 23 (expression_ops -> - expression_ops .)
    ;               reduce using rule 23 (expression_ops -> - expression_ops .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! CONCAT          [ shift and go to state 38 ]


state 40

    (28) arg -> NAME .
    (29) arg -> NAME . , arg

    )               reduce using rule 28 (arg -> NAME .)
    ,               shift and go to state 52


state 41

    (24) funcao -> NAME ( arg . )

    )               shift and go to state 53


state 42

    (7) ComandosIniciais -> VARIAVEL = func_call ; .

    ESCREVER        reduce using rule 7 (ComandosIniciais -> VARIAVEL = func_call ; .)
    FUNCAO          reduce using rule 7 (ComandosIniciais -> VARIAVEL = func_call ; .)
    VARIAVEL        reduce using rule 7 (ComandosIniciais -> VARIAVEL = func_call ; .)
    $end            reduce using rule 7 (ComandosIniciais -> VARIAVEL = func_call ; .)


state 43

    (8) ComandosIniciais -> VARIAVEL = ENTRADA ( . ) ;

    )               shift and go to state 54


state 44

    (25) func_call -> ALEATORIO ( . expression_ops )
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 22
    STR             shift and go to state 31
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 55

state 45

    (26) func_call -> ESCREVER ( . expression_ops )
    (27) func_call -> ESCREVER ( . STR )
    (14) expression_ops -> . expression_ops + expression_ops
    (15) expression_ops -> . expression_ops - expression_ops
    (16) expression_ops -> . expression_ops * expression_ops
    (17) expression_ops -> . expression_ops / expression_ops
    (18) expression_ops -> . expression_ops CONCAT expression_ops
    (19) expression_ops -> . ( expression_ops )
    (20) expression_ops -> . NUM
    (21) expression_ops -> . STR
    (22) expression_ops -> . VARIAVEL
    (23) expression_ops -> . - expression_ops

    STR             shift and go to state 57
    (               shift and go to state 16
    NUM             shift and go to state 22
    VARIAVEL        shift and go to state 32
    -               shift and go to state 21

    expression_ops                 shift and go to state 56

state 46

    (19) expression_ops -> ( expression_ops ) .

    +               reduce using rule 19 (expression_ops -> ( expression_ops ) .)
    -               reduce using rule 19 (expression_ops -> ( expression_ops ) .)
    *               reduce using rule 19 (expression_ops -> ( expression_ops ) .)
    /               reduce using rule 19 (expression_ops -> ( expression_ops ) .)
    CONCAT          reduce using rule 19 (expression_ops -> ( expression_ops ) .)
    )               reduce using rule 19 (expression_ops -> ( expression_ops ) .)
    ;               reduce using rule 19 (expression_ops -> ( expression_ops ) .)


state 47

    (14) expression_ops -> expression_ops + expression_ops .
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 14 (expression_ops -> expression_ops + expression_ops .)
    -               reduce using rule 14 (expression_ops -> expression_ops + expression_ops .)
    CONCAT          reduce using rule 14 (expression_ops -> expression_ops + expression_ops .)
    )               reduce using rule 14 (expression_ops -> expression_ops + expression_ops .)
    ;               reduce using rule 14 (expression_ops -> expression_ops + expression_ops .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 14 (expression_ops -> expression_ops + expression_ops .) ]
  ! /               [ reduce using rule 14 (expression_ops -> expression_ops + expression_ops .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! CONCAT          [ shift and go to state 38 ]


state 48

    (15) expression_ops -> expression_ops - expression_ops .
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 15 (expression_ops -> expression_ops - expression_ops .)
    -               reduce using rule 15 (expression_ops -> expression_ops - expression_ops .)
    CONCAT          reduce using rule 15 (expression_ops -> expression_ops - expression_ops .)
    )               reduce using rule 15 (expression_ops -> expression_ops - expression_ops .)
    ;               reduce using rule 15 (expression_ops -> expression_ops - expression_ops .)
    *               shift and go to state 36
    /               shift and go to state 37

  ! *               [ reduce using rule 15 (expression_ops -> expression_ops - expression_ops .) ]
  ! /               [ reduce using rule 15 (expression_ops -> expression_ops - expression_ops .) ]
  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! CONCAT          [ shift and go to state 38 ]


state 49

    (16) expression_ops -> expression_ops * expression_ops .
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 16 (expression_ops -> expression_ops * expression_ops .)
    -               reduce using rule 16 (expression_ops -> expression_ops * expression_ops .)
    *               reduce using rule 16 (expression_ops -> expression_ops * expression_ops .)
    /               reduce using rule 16 (expression_ops -> expression_ops * expression_ops .)
    CONCAT          reduce using rule 16 (expression_ops -> expression_ops * expression_ops .)
    )               reduce using rule 16 (expression_ops -> expression_ops * expression_ops .)
    ;               reduce using rule 16 (expression_ops -> expression_ops * expression_ops .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! CONCAT          [ shift and go to state 38 ]


state 50

    (17) expression_ops -> expression_ops / expression_ops .
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 17 (expression_ops -> expression_ops / expression_ops .)
    -               reduce using rule 17 (expression_ops -> expression_ops / expression_ops .)
    *               reduce using rule 17 (expression_ops -> expression_ops / expression_ops .)
    /               reduce using rule 17 (expression_ops -> expression_ops / expression_ops .)
    CONCAT          reduce using rule 17 (expression_ops -> expression_ops / expression_ops .)
    )               reduce using rule 17 (expression_ops -> expression_ops / expression_ops .)
    ;               reduce using rule 17 (expression_ops -> expression_ops / expression_ops .)

  ! +               [ shift and go to state 34 ]
  ! -               [ shift and go to state 35 ]
  ! *               [ shift and go to state 36 ]
  ! /               [ shift and go to state 37 ]
  ! CONCAT          [ shift and go to state 38 ]


state 51

    (18) expression_ops -> expression_ops CONCAT expression_ops .
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    CONCAT          reduce using rule 18 (expression_ops -> expression_ops CONCAT expression_ops .)
    )               reduce using rule 18 (expression_ops -> expression_ops CONCAT expression_ops .)
    ;               reduce using rule 18 (expression_ops -> expression_ops CONCAT expression_ops .)
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37

  ! +               [ reduce using rule 18 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! -               [ reduce using rule 18 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! *               [ reduce using rule 18 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! /               [ reduce using rule 18 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! CONCAT          [ shift and go to state 38 ]


state 52

    (29) arg -> NAME , . arg
    (28) arg -> . NAME
    (29) arg -> . NAME , arg

    NAME            shift and go to state 40

    arg                            shift and go to state 58

state 53

    (24) funcao -> NAME ( arg ) .

    FIM             reduce using rule 24 (funcao -> NAME ( arg ) .)


state 54

    (8) ComandosIniciais -> VARIAVEL = ENTRADA ( ) . ;

    ;               shift and go to state 59


state 55

    (25) func_call -> ALEATORIO ( expression_ops . )
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    )               shift and go to state 60
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    CONCAT          shift and go to state 38


state 56

    (26) func_call -> ESCREVER ( expression_ops . )
    (14) expression_ops -> expression_ops . + expression_ops
    (15) expression_ops -> expression_ops . - expression_ops
    (16) expression_ops -> expression_ops . * expression_ops
    (17) expression_ops -> expression_ops . / expression_ops
    (18) expression_ops -> expression_ops . CONCAT expression_ops

    )               shift and go to state 61
    +               shift and go to state 34
    -               shift and go to state 35
    *               shift and go to state 36
    /               shift and go to state 37
    CONCAT          shift and go to state 38


state 57

    (27) func_call -> ESCREVER ( STR . )
    (21) expression_ops -> STR .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 62
    +               reduce using rule 21 (expression_ops -> STR .)
    -               reduce using rule 21 (expression_ops -> STR .)
    *               reduce using rule 21 (expression_ops -> STR .)
    /               reduce using rule 21 (expression_ops -> STR .)
    CONCAT          reduce using rule 21 (expression_ops -> STR .)

  ! )               [ reduce using rule 21 (expression_ops -> STR .) ]


state 58

    (29) arg -> NAME , arg .

    )               reduce using rule 29 (arg -> NAME , arg .)


state 59

    (8) ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .

    ESCREVER        reduce using rule 8 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)
    FUNCAO          reduce using rule 8 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)
    VARIAVEL        reduce using rule 8 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)
    $end            reduce using rule 8 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)


state 60

    (25) func_call -> ALEATORIO ( expression_ops ) .

    ;               reduce using rule 25 (func_call -> ALEATORIO ( expression_ops ) .)


state 61

    (26) func_call -> ESCREVER ( expression_ops ) .

    ;               reduce using rule 26 (func_call -> ESCREVER ( expression_ops ) .)


state 62

    (27) func_call -> ESCREVER ( STR ) .

    ;               reduce using rule 27 (func_call -> ESCREVER ( STR ) .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ) in state 57 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (expression -> STR)
WARNING: rejected rule (expression_ops -> STR) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (expression -> VARIAVEL)
WARNING: rejected rule (expression_ops -> VARIAVEL) in state 20
