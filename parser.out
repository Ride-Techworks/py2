Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    INTERPOLATED_STR

Grammar

Rule 0     S' -> Rec
Rule 1     Rec -> Start
Rule 2     Rec -> Rec Start
Rule 3     Start -> ComandosIniciais
Rule 4     ComandosIniciais -> ESCREVER escrever ;
Rule 5     ComandosIniciais -> variavel ;
Rule 6     ComandosIniciais -> FUNCAO funcao FIM
Rule 7     ComandosIniciais -> FUNCAO funcao ;
Rule 8     ComandosIniciais -> VARIAVEL = func_call ;
Rule 9     ComandosIniciais -> VARIAVEL = ENTRADA ( ) ;
Rule 10    ComandosIniciais -> VARIAVEL = list ;
Rule 11    escrever -> ( expression )
Rule 12    variavel -> VARIAVEL = expression
Rule 13    expression -> expression_ops
Rule 14    expression -> STR
Rule 15    expression -> VARIAVEL
Rule 16    expression -> func_call
Rule 17    expression -> list
Rule 18    expression_ops -> expression_ops + expression_ops
Rule 19    expression_ops -> expression_ops - expression_ops
Rule 20    expression_ops -> expression_ops * expression_ops
Rule 21    expression_ops -> expression_ops / expression_ops
Rule 22    expression_ops -> expression_ops CONCAT expression_ops
Rule 23    expression_ops -> ( expression_ops )
Rule 24    expression_ops -> NUM
Rule 25    expression_ops -> STR
Rule 26    expression_ops -> VARIAVEL
Rule 27    expression_ops -> - expression_ops
Rule 28    list -> [ elements ]
Rule 29    list -> [ ]
Rule 30    elements -> element
Rule 31    elements -> element , elements
Rule 32    element -> expression
Rule 33    funcao -> NAME ( arg ) , : func_call
Rule 34    funcao -> NAME ( arg ) , : expression_ops
Rule 35    funcao -> NAME ( arg ) : blocks
Rule 36    blocks -> block
Rule 37    blocks -> blocks block
Rule 38    block -> variavel ;
Rule 39    block -> expression_ops ;
Rule 40    block -> func_call ;
Rule 41    func_call -> ALEATORIO ( expression_ops )
Rule 42    func_call -> ESCREVER ( expression_ops )
Rule 43    func_call -> ESCREVER ( STR )
Rule 44    func_call -> NAME ( arg )
Rule 45    arg -> expression_ops
Rule 46    arg -> expression_ops , arg

Terminals, with rules where they appear

(                    : 9 11 23 33 34 35 41 42 43 44
)                    : 9 11 23 33 34 35 41 42 43 44
*                    : 20
+                    : 18
,                    : 31 33 34 46
-                    : 19 27
/                    : 21
:                    : 33 34 35
;                    : 4 5 7 8 9 10 38 39 40
=                    : 8 9 10 12
ALEATORIO            : 41
CONCAT               : 22
ENTRADA              : 9
ESCREVER             : 4 42 43
FIM                  : 6
FUNCAO               : 6 7
NAME                 : 33 34 35 44
NUM                  : 24
STR                  : 14 25 43
VARIAVEL             : 8 9 10 12 15 26
[                    : 28 29
]                    : 28 29
error                : 

Nonterminals, with rules where they appear

ComandosIniciais     : 3
Rec                  : 2 0
Start                : 1 2
arg                  : 33 34 35 44 46
block                : 36 37
blocks               : 35 37
element              : 30 31
elements             : 28 31
escrever             : 4
expression           : 11 12 32
expression_ops       : 13 18 18 19 19 20 20 21 21 22 22 23 27 34 39 41 42 45 46
func_call            : 8 16 33 40
funcao               : 6 7
list                 : 10 17
variavel             : 5 38

Parsing method: LALR

state 0

    (0) S' -> . Rec
    (1) Rec -> . Start
    (2) Rec -> . Rec Start
    (3) Start -> . ComandosIniciais
    (4) ComandosIniciais -> . ESCREVER escrever ;
    (5) ComandosIniciais -> . variavel ;
    (6) ComandosIniciais -> . FUNCAO funcao FIM
    (7) ComandosIniciais -> . FUNCAO funcao ;
    (8) ComandosIniciais -> . VARIAVEL = func_call ;
    (9) ComandosIniciais -> . VARIAVEL = ENTRADA ( ) ;
    (10) ComandosIniciais -> . VARIAVEL = list ;
    (12) variavel -> . VARIAVEL = expression

    ESCREVER        shift and go to state 4
    FUNCAO          shift and go to state 6
    VARIAVEL        shift and go to state 7

    Rec                            shift and go to state 1
    Start                          shift and go to state 2
    ComandosIniciais               shift and go to state 3
    variavel                       shift and go to state 5

state 1

    (0) S' -> Rec .
    (2) Rec -> Rec . Start
    (3) Start -> . ComandosIniciais
    (4) ComandosIniciais -> . ESCREVER escrever ;
    (5) ComandosIniciais -> . variavel ;
    (6) ComandosIniciais -> . FUNCAO funcao FIM
    (7) ComandosIniciais -> . FUNCAO funcao ;
    (8) ComandosIniciais -> . VARIAVEL = func_call ;
    (9) ComandosIniciais -> . VARIAVEL = ENTRADA ( ) ;
    (10) ComandosIniciais -> . VARIAVEL = list ;
    (12) variavel -> . VARIAVEL = expression

    ESCREVER        shift and go to state 4
    FUNCAO          shift and go to state 6
    VARIAVEL        shift and go to state 7

    Start                          shift and go to state 8
    ComandosIniciais               shift and go to state 3
    variavel                       shift and go to state 5

state 2

    (1) Rec -> Start .

    ESCREVER        reduce using rule 1 (Rec -> Start .)
    FUNCAO          reduce using rule 1 (Rec -> Start .)
    VARIAVEL        reduce using rule 1 (Rec -> Start .)
    $end            reduce using rule 1 (Rec -> Start .)


state 3

    (3) Start -> ComandosIniciais .

    ESCREVER        reduce using rule 3 (Start -> ComandosIniciais .)
    FUNCAO          reduce using rule 3 (Start -> ComandosIniciais .)
    VARIAVEL        reduce using rule 3 (Start -> ComandosIniciais .)
    $end            reduce using rule 3 (Start -> ComandosIniciais .)


state 4

    (4) ComandosIniciais -> ESCREVER . escrever ;
    (11) escrever -> . ( expression )

    (               shift and go to state 10

    escrever                       shift and go to state 9

state 5

    (5) ComandosIniciais -> variavel . ;

    ;               shift and go to state 11


state 6

    (6) ComandosIniciais -> FUNCAO . funcao FIM
    (7) ComandosIniciais -> FUNCAO . funcao ;
    (33) funcao -> . NAME ( arg ) , : func_call
    (34) funcao -> . NAME ( arg ) , : expression_ops
    (35) funcao -> . NAME ( arg ) : blocks

    NAME            shift and go to state 13

    funcao                         shift and go to state 12

state 7

    (8) ComandosIniciais -> VARIAVEL . = func_call ;
    (9) ComandosIniciais -> VARIAVEL . = ENTRADA ( ) ;
    (10) ComandosIniciais -> VARIAVEL . = list ;
    (12) variavel -> VARIAVEL . = expression

    =               shift and go to state 14


state 8

    (2) Rec -> Rec Start .

    ESCREVER        reduce using rule 2 (Rec -> Rec Start .)
    FUNCAO          reduce using rule 2 (Rec -> Rec Start .)
    VARIAVEL        reduce using rule 2 (Rec -> Rec Start .)
    $end            reduce using rule 2 (Rec -> Rec Start .)


state 9

    (4) ComandosIniciais -> ESCREVER escrever . ;

    ;               shift and go to state 15


state 10

    (11) escrever -> ( . expression )
    (13) expression -> . expression_ops
    (14) expression -> . STR
    (15) expression -> . VARIAVEL
    (16) expression -> . func_call
    (17) expression -> . list
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )
    (28) list -> . [ elements ]
    (29) list -> . [ ]

    STR             shift and go to state 19
    VARIAVEL        shift and go to state 20
    (               shift and go to state 16
    NUM             shift and go to state 24
    -               shift and go to state 23
    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27
    [               shift and go to state 28

    expression                     shift and go to state 17
    expression_ops                 shift and go to state 18
    func_call                      shift and go to state 21
    list                           shift and go to state 22

state 11

    (5) ComandosIniciais -> variavel ; .

    ESCREVER        reduce using rule 5 (ComandosIniciais -> variavel ; .)
    FUNCAO          reduce using rule 5 (ComandosIniciais -> variavel ; .)
    VARIAVEL        reduce using rule 5 (ComandosIniciais -> variavel ; .)
    $end            reduce using rule 5 (ComandosIniciais -> variavel ; .)


state 12

    (6) ComandosIniciais -> FUNCAO funcao . FIM
    (7) ComandosIniciais -> FUNCAO funcao . ;

    FIM             shift and go to state 29
    ;               shift and go to state 30


state 13

    (33) funcao -> NAME . ( arg ) , : func_call
    (34) funcao -> NAME . ( arg ) , : expression_ops
    (35) funcao -> NAME . ( arg ) : blocks

    (               shift and go to state 31


state 14

    (8) ComandosIniciais -> VARIAVEL = . func_call ;
    (9) ComandosIniciais -> VARIAVEL = . ENTRADA ( ) ;
    (10) ComandosIniciais -> VARIAVEL = . list ;
    (12) variavel -> VARIAVEL = . expression
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )
    (28) list -> . [ elements ]
    (29) list -> . [ ]
    (13) expression -> . expression_ops
    (14) expression -> . STR
    (15) expression -> . VARIAVEL
    (16) expression -> . func_call
    (17) expression -> . list
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    ENTRADA         shift and go to state 33
    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27
    [               shift and go to state 28
    STR             shift and go to state 19
    VARIAVEL        shift and go to state 20
    (               shift and go to state 16
    NUM             shift and go to state 24
    -               shift and go to state 23

    func_call                      shift and go to state 32
    list                           shift and go to state 34
    expression                     shift and go to state 35
    expression_ops                 shift and go to state 18

state 15

    (4) ComandosIniciais -> ESCREVER escrever ; .

    ESCREVER        reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)
    FUNCAO          reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)
    VARIAVEL        reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)
    $end            reduce using rule 4 (ComandosIniciais -> ESCREVER escrever ; .)


state 16

    (23) expression_ops -> ( . expression_ops )
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 36

state 17

    (11) escrever -> ( expression . )

    )               shift and go to state 39


state 18

    (13) expression -> expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    )               reduce using rule 13 (expression -> expression_ops .)
    ;               reduce using rule 13 (expression -> expression_ops .)
    ,               reduce using rule 13 (expression -> expression_ops .)
    ]               reduce using rule 13 (expression -> expression_ops .)
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    CONCAT          shift and go to state 44


state 19

    (14) expression -> STR .
    (25) expression_ops -> STR .

  ! reduce/reduce conflict for ) resolved using rule 14 (expression -> STR .)
  ! reduce/reduce conflict for ; resolved using rule 14 (expression -> STR .)
  ! reduce/reduce conflict for , resolved using rule 14 (expression -> STR .)
  ! reduce/reduce conflict for ] resolved using rule 14 (expression -> STR .)
    )               reduce using rule 14 (expression -> STR .)
    ;               reduce using rule 14 (expression -> STR .)
    ,               reduce using rule 14 (expression -> STR .)
    ]               reduce using rule 14 (expression -> STR .)
    +               reduce using rule 25 (expression_ops -> STR .)
    -               reduce using rule 25 (expression_ops -> STR .)
    *               reduce using rule 25 (expression_ops -> STR .)
    /               reduce using rule 25 (expression_ops -> STR .)
    CONCAT          reduce using rule 25 (expression_ops -> STR .)

  ! )               [ reduce using rule 25 (expression_ops -> STR .) ]
  ! ;               [ reduce using rule 25 (expression_ops -> STR .) ]
  ! ,               [ reduce using rule 25 (expression_ops -> STR .) ]
  ! ]               [ reduce using rule 25 (expression_ops -> STR .) ]


state 20

    (15) expression -> VARIAVEL .
    (26) expression_ops -> VARIAVEL .

  ! reduce/reduce conflict for ) resolved using rule 15 (expression -> VARIAVEL .)
  ! reduce/reduce conflict for ; resolved using rule 15 (expression -> VARIAVEL .)
  ! reduce/reduce conflict for , resolved using rule 15 (expression -> VARIAVEL .)
  ! reduce/reduce conflict for ] resolved using rule 15 (expression -> VARIAVEL .)
    )               reduce using rule 15 (expression -> VARIAVEL .)
    ;               reduce using rule 15 (expression -> VARIAVEL .)
    ,               reduce using rule 15 (expression -> VARIAVEL .)
    ]               reduce using rule 15 (expression -> VARIAVEL .)
    +               reduce using rule 26 (expression_ops -> VARIAVEL .)
    -               reduce using rule 26 (expression_ops -> VARIAVEL .)
    *               reduce using rule 26 (expression_ops -> VARIAVEL .)
    /               reduce using rule 26 (expression_ops -> VARIAVEL .)
    CONCAT          reduce using rule 26 (expression_ops -> VARIAVEL .)

  ! )               [ reduce using rule 26 (expression_ops -> VARIAVEL .) ]
  ! ;               [ reduce using rule 26 (expression_ops -> VARIAVEL .) ]
  ! ,               [ reduce using rule 26 (expression_ops -> VARIAVEL .) ]
  ! ]               [ reduce using rule 26 (expression_ops -> VARIAVEL .) ]


state 21

    (16) expression -> func_call .

    )               reduce using rule 16 (expression -> func_call .)
    ,               reduce using rule 16 (expression -> func_call .)
    ]               reduce using rule 16 (expression -> func_call .)
    ;               reduce using rule 16 (expression -> func_call .)

    expression_ops                 shift and go to state 39

state 22

    (17) expression -> list .

    )               reduce using rule 17 (expression -> list .)
    ,               reduce using rule 17 (expression -> list .)
    ]               reduce using rule 17 (expression -> list .)
    ;               reduce using rule 17 (expression -> list .)


state 23

    (27) expression_ops -> - . expression_ops
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 45

state 24

    (24) expression_ops -> NUM .

    +               reduce using rule 24 (expression_ops -> NUM .)
    -               reduce using rule 24 (expression_ops -> NUM .)
    *               reduce using rule 24 (expression_ops -> NUM .)
    /               reduce using rule 24 (expression_ops -> NUM .)
    CONCAT          reduce using rule 24 (expression_ops -> NUM .)
    )               reduce using rule 24 (expression_ops -> NUM .)
    ;               reduce using rule 24 (expression_ops -> NUM .)
    ,               reduce using rule 24 (expression_ops -> NUM .)
    ]               reduce using rule 24 (expression_ops -> NUM .)
    FIM             reduce using rule 24 (expression_ops -> NUM .)

    arg                            shift and go to state 41

state 25

    (41) func_call -> ALEATORIO . ( expression_ops )

    (               shift and go to state 46


state 26

    (42) func_call -> ESCREVER . ( expression_ops )
    (43) func_call -> ESCREVER . ( STR )

    (               shift and go to state 47


state 27

    (44) func_call -> NAME . ( arg )

    (               shift and go to state 48


state 28

    (28) list -> [ . elements ]
    (29) list -> [ . ]
    (30) elements -> . element
    (31) elements -> . element , elements
    (32) element -> . expression
    (13) expression -> . expression_ops
    (14) expression -> . STR
    (15) expression -> . VARIAVEL
    (16) expression -> . func_call
    (17) expression -> . list
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )
    (28) list -> . [ elements ]
    (29) list -> . [ ]

    ]               shift and go to state 50
    STR             shift and go to state 19
    VARIAVEL        shift and go to state 20
    (               shift and go to state 16
    NUM             shift and go to state 24
    -               shift and go to state 23
    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27
    [               shift and go to state 28

    elements                       shift and go to state 49
    element                        shift and go to state 51
    expression                     shift and go to state 52
    expression_ops                 shift and go to state 18
    func_call                      shift and go to state 21
    list                           shift and go to state 22

state 29

    (6) ComandosIniciais -> FUNCAO funcao FIM .

    ESCREVER        reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)
    FUNCAO          reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)
    VARIAVEL        reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)
    $end            reduce using rule 6 (ComandosIniciais -> FUNCAO funcao FIM .)


state 30

    (7) ComandosIniciais -> FUNCAO funcao ; .

    ESCREVER        reduce using rule 7 (ComandosIniciais -> FUNCAO funcao ; .)
    FUNCAO          reduce using rule 7 (ComandosIniciais -> FUNCAO funcao ; .)
    VARIAVEL        reduce using rule 7 (ComandosIniciais -> FUNCAO funcao ; .)
    $end            reduce using rule 7 (ComandosIniciais -> FUNCAO funcao ; .)


state 31

    (33) funcao -> NAME ( . arg ) , : func_call
    (34) funcao -> NAME ( . arg ) , : expression_ops
    (35) funcao -> NAME ( . arg ) : blocks
    (45) arg -> . expression_ops
    (46) arg -> . expression_ops , arg
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    arg                            shift and go to state 53
    expression_ops                 shift and go to state 54

state 32

    (8) ComandosIniciais -> VARIAVEL = func_call . ;
    (16) expression -> func_call .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 55

  ! ;               [ reduce using rule 16 (expression -> func_call .) ]


state 33

    (9) ComandosIniciais -> VARIAVEL = ENTRADA . ( ) ;

    (               shift and go to state 56


state 34

    (10) ComandosIniciais -> VARIAVEL = list . ;
    (17) expression -> list .

  ! shift/reduce conflict for ; resolved as shift
    ;               shift and go to state 57

  ! ;               [ reduce using rule 17 (expression -> list .) ]

    expression_ops                 shift and go to state 47

state 35

    (12) variavel -> VARIAVEL = expression .

    ;               reduce using rule 12 (variavel -> VARIAVEL = expression .)

    expression_ops                 shift and go to state 48

state 36

    (23) expression_ops -> ( expression_ops . )
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    )               shift and go to state 58
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    CONCAT          shift and go to state 44

    expression_ops                 shift and go to state 49

state 37

    (25) expression_ops -> STR .

    )               reduce using rule 25 (expression_ops -> STR .)
    +               reduce using rule 25 (expression_ops -> STR .)
    -               reduce using rule 25 (expression_ops -> STR .)
    *               reduce using rule 25 (expression_ops -> STR .)
    /               reduce using rule 25 (expression_ops -> STR .)
    CONCAT          reduce using rule 25 (expression_ops -> STR .)
    ;               reduce using rule 25 (expression_ops -> STR .)
    ,               reduce using rule 25 (expression_ops -> STR .)
    ]               reduce using rule 25 (expression_ops -> STR .)
    FIM             reduce using rule 25 (expression_ops -> STR .)

    expression_ops                 shift and go to state 50

state 38

    (26) expression_ops -> VARIAVEL .

    )               reduce using rule 26 (expression_ops -> VARIAVEL .)
    +               reduce using rule 26 (expression_ops -> VARIAVEL .)
    -               reduce using rule 26 (expression_ops -> VARIAVEL .)
    *               reduce using rule 26 (expression_ops -> VARIAVEL .)
    /               reduce using rule 26 (expression_ops -> VARIAVEL .)
    CONCAT          reduce using rule 26 (expression_ops -> VARIAVEL .)
    ;               reduce using rule 26 (expression_ops -> VARIAVEL .)
    ,               reduce using rule 26 (expression_ops -> VARIAVEL .)
    ]               reduce using rule 26 (expression_ops -> VARIAVEL .)
    FIM             reduce using rule 26 (expression_ops -> VARIAVEL .)


state 39

    (11) escrever -> ( expression ) .

    ;               reduce using rule 11 (escrever -> ( expression ) .)


state 40

    (18) expression_ops -> expression_ops + . expression_ops
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 59

state 41

    (19) expression_ops -> expression_ops - . expression_ops
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 60

state 42

    (20) expression_ops -> expression_ops * . expression_ops
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 61

state 43

    (21) expression_ops -> expression_ops / . expression_ops
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 62

state 44

    (22) expression_ops -> expression_ops CONCAT . expression_ops
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 63

state 45

    (27) expression_ops -> - expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 27 (expression_ops -> - expression_ops .)
    -               reduce using rule 27 (expression_ops -> - expression_ops .)
    *               reduce using rule 27 (expression_ops -> - expression_ops .)
    /               reduce using rule 27 (expression_ops -> - expression_ops .)
    CONCAT          reduce using rule 27 (expression_ops -> - expression_ops .)
    )               reduce using rule 27 (expression_ops -> - expression_ops .)
    ;               reduce using rule 27 (expression_ops -> - expression_ops .)
    ,               reduce using rule 27 (expression_ops -> - expression_ops .)
    ]               reduce using rule 27 (expression_ops -> - expression_ops .)
    FIM             reduce using rule 27 (expression_ops -> - expression_ops .)

  ! +               [ shift and go to state 40 ]
  ! -               [ shift and go to state 41 ]
  ! *               [ shift and go to state 42 ]
  ! /               [ shift and go to state 43 ]
  ! CONCAT          [ shift and go to state 44 ]

    expression_ops                 shift and go to state 56

state 46

    (41) func_call -> ALEATORIO ( . expression_ops )
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 64

state 47

    (42) func_call -> ESCREVER ( . expression_ops )
    (43) func_call -> ESCREVER ( . STR )
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    STR             shift and go to state 66
    (               shift and go to state 16
    NUM             shift and go to state 24
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 65

state 48

    (44) func_call -> NAME ( . arg )
    (45) arg -> . expression_ops
    (46) arg -> . expression_ops , arg
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    arg                            shift and go to state 67
    expression_ops                 shift and go to state 54

state 49

    (28) list -> [ elements . ]

    ]               shift and go to state 68


state 50

    (29) list -> [ ] .

    )               reduce using rule 29 (list -> [ ] .)
    ;               reduce using rule 29 (list -> [ ] .)
    ,               reduce using rule 29 (list -> [ ] .)
    ]               reduce using rule 29 (list -> [ ] .)


state 51

    (30) elements -> element .
    (31) elements -> element . , elements

    ]               reduce using rule 30 (elements -> element .)
    ,               shift and go to state 69


state 52

    (32) element -> expression .

    ,               reduce using rule 32 (element -> expression .)
    ]               reduce using rule 32 (element -> expression .)

    arg                            shift and go to state 58

state 53

    (33) funcao -> NAME ( arg . ) , : func_call
    (34) funcao -> NAME ( arg . ) , : expression_ops
    (35) funcao -> NAME ( arg . ) : blocks

    )               shift and go to state 70


state 54

    (45) arg -> expression_ops .
    (46) arg -> expression_ops . , arg
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    )               reduce using rule 45 (arg -> expression_ops .)
    ,               shift and go to state 71
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    CONCAT          shift and go to state 44


state 55

    (8) ComandosIniciais -> VARIAVEL = func_call ; .

    ESCREVER        reduce using rule 8 (ComandosIniciais -> VARIAVEL = func_call ; .)
    FUNCAO          reduce using rule 8 (ComandosIniciais -> VARIAVEL = func_call ; .)
    VARIAVEL        reduce using rule 8 (ComandosIniciais -> VARIAVEL = func_call ; .)
    $end            reduce using rule 8 (ComandosIniciais -> VARIAVEL = func_call ; .)


state 56

    (9) ComandosIniciais -> VARIAVEL = ENTRADA ( . ) ;

    )               shift and go to state 72


state 57

    (10) ComandosIniciais -> VARIAVEL = list ; .

    ESCREVER        reduce using rule 10 (ComandosIniciais -> VARIAVEL = list ; .)
    FUNCAO          reduce using rule 10 (ComandosIniciais -> VARIAVEL = list ; .)
    VARIAVEL        reduce using rule 10 (ComandosIniciais -> VARIAVEL = list ; .)
    $end            reduce using rule 10 (ComandosIniciais -> VARIAVEL = list ; .)


state 58

    (23) expression_ops -> ( expression_ops ) .

    +               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    -               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    *               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    /               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    CONCAT          reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    )               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    ;               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    ,               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    ]               reduce using rule 23 (expression_ops -> ( expression_ops ) .)
    FIM             reduce using rule 23 (expression_ops -> ( expression_ops ) .)


state 59

    (18) expression_ops -> expression_ops + expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    -               reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    CONCAT          reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    )               reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    ;               reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    ,               reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    ]               reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    FIM             reduce using rule 18 (expression_ops -> expression_ops + expression_ops .)
    *               shift and go to state 42
    /               shift and go to state 43

  ! *               [ reduce using rule 18 (expression_ops -> expression_ops + expression_ops .) ]
  ! /               [ reduce using rule 18 (expression_ops -> expression_ops + expression_ops .) ]
  ! +               [ shift and go to state 40 ]
  ! -               [ shift and go to state 41 ]
  ! CONCAT          [ shift and go to state 44 ]


state 60

    (19) expression_ops -> expression_ops - expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    -               reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    CONCAT          reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    )               reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    ;               reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    ,               reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    ]               reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    FIM             reduce using rule 19 (expression_ops -> expression_ops - expression_ops .)
    *               shift and go to state 42
    /               shift and go to state 43

  ! *               [ reduce using rule 19 (expression_ops -> expression_ops - expression_ops .) ]
  ! /               [ reduce using rule 19 (expression_ops -> expression_ops - expression_ops .) ]
  ! +               [ shift and go to state 40 ]
  ! -               [ shift and go to state 41 ]
  ! CONCAT          [ shift and go to state 44 ]


state 61

    (20) expression_ops -> expression_ops * expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    -               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    *               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    /               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    CONCAT          reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    )               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    ;               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    ,               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    ]               reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)
    FIM             reduce using rule 20 (expression_ops -> expression_ops * expression_ops .)

  ! +               [ shift and go to state 40 ]
  ! -               [ shift and go to state 41 ]
  ! *               [ shift and go to state 42 ]
  ! /               [ shift and go to state 43 ]
  ! CONCAT          [ shift and go to state 44 ]


state 62

    (21) expression_ops -> expression_ops / expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    +               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    -               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    *               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    /               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    CONCAT          reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    )               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    ;               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    ,               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    ]               reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)
    FIM             reduce using rule 21 (expression_ops -> expression_ops / expression_ops .)

  ! +               [ shift and go to state 40 ]
  ! -               [ shift and go to state 41 ]
  ! *               [ shift and go to state 42 ]
  ! /               [ shift and go to state 43 ]
  ! CONCAT          [ shift and go to state 44 ]


state 63

    (22) expression_ops -> expression_ops CONCAT expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    CONCAT          reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .)
    )               reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .)
    ;               reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .)
    ,               reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .)
    ]               reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .)
    FIM             reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .)
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43

  ! +               [ reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! -               [ reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! *               [ reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! /               [ reduce using rule 22 (expression_ops -> expression_ops CONCAT expression_ops .) ]
  ! CONCAT          [ shift and go to state 44 ]


state 64

    (41) func_call -> ALEATORIO ( expression_ops . )
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    )               shift and go to state 73
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    CONCAT          shift and go to state 44


state 65

    (42) func_call -> ESCREVER ( expression_ops . )
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    )               shift and go to state 74
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    CONCAT          shift and go to state 44


state 66

    (43) func_call -> ESCREVER ( STR . )
    (25) expression_ops -> STR .

  ! shift/reduce conflict for ) resolved as shift
    )               shift and go to state 75
    +               reduce using rule 25 (expression_ops -> STR .)
    -               reduce using rule 25 (expression_ops -> STR .)
    *               reduce using rule 25 (expression_ops -> STR .)
    /               reduce using rule 25 (expression_ops -> STR .)
    CONCAT          reduce using rule 25 (expression_ops -> STR .)

  ! )               [ reduce using rule 25 (expression_ops -> STR .) ]


state 67

    (44) func_call -> NAME ( arg . )

    )               shift and go to state 76


state 68

    (28) list -> [ elements ] .

    )               reduce using rule 28 (list -> [ elements ] .)
    ;               reduce using rule 28 (list -> [ elements ] .)
    ,               reduce using rule 28 (list -> [ elements ] .)
    ]               reduce using rule 28 (list -> [ elements ] .)


state 69

    (31) elements -> element , . elements
    (30) elements -> . element
    (31) elements -> . element , elements
    (32) element -> . expression
    (13) expression -> . expression_ops
    (14) expression -> . STR
    (15) expression -> . VARIAVEL
    (16) expression -> . func_call
    (17) expression -> . list
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )
    (28) list -> . [ elements ]
    (29) list -> . [ ]

    STR             shift and go to state 19
    VARIAVEL        shift and go to state 20
    (               shift and go to state 16
    NUM             shift and go to state 24
    -               shift and go to state 23
    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27
    [               shift and go to state 28

    element                        shift and go to state 51
    elements                       shift and go to state 77
    expression                     shift and go to state 52
    expression_ops                 shift and go to state 18
    func_call                      shift and go to state 21
    list                           shift and go to state 22

state 70

    (33) funcao -> NAME ( arg ) . , : func_call
    (34) funcao -> NAME ( arg ) . , : expression_ops
    (35) funcao -> NAME ( arg ) . : blocks

    ,               shift and go to state 78
    :               shift and go to state 79


state 71

    (46) arg -> expression_ops , . arg
    (45) arg -> . expression_ops
    (46) arg -> . expression_ops , arg
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    expression_ops                 shift and go to state 54
    arg                            shift and go to state 80

state 72

    (9) ComandosIniciais -> VARIAVEL = ENTRADA ( ) . ;

    ;               shift and go to state 81


state 73

    (41) func_call -> ALEATORIO ( expression_ops ) .

    )               reduce using rule 41 (func_call -> ALEATORIO ( expression_ops ) .)
    ;               reduce using rule 41 (func_call -> ALEATORIO ( expression_ops ) .)
    ,               reduce using rule 41 (func_call -> ALEATORIO ( expression_ops ) .)
    ]               reduce using rule 41 (func_call -> ALEATORIO ( expression_ops ) .)
    FIM             reduce using rule 41 (func_call -> ALEATORIO ( expression_ops ) .)


state 74

    (42) func_call -> ESCREVER ( expression_ops ) .

    )               reduce using rule 42 (func_call -> ESCREVER ( expression_ops ) .)
    ;               reduce using rule 42 (func_call -> ESCREVER ( expression_ops ) .)
    ,               reduce using rule 42 (func_call -> ESCREVER ( expression_ops ) .)
    ]               reduce using rule 42 (func_call -> ESCREVER ( expression_ops ) .)
    FIM             reduce using rule 42 (func_call -> ESCREVER ( expression_ops ) .)


state 75

    (43) func_call -> ESCREVER ( STR ) .

    )               reduce using rule 43 (func_call -> ESCREVER ( STR ) .)
    ;               reduce using rule 43 (func_call -> ESCREVER ( STR ) .)
    ,               reduce using rule 43 (func_call -> ESCREVER ( STR ) .)
    ]               reduce using rule 43 (func_call -> ESCREVER ( STR ) .)
    FIM             reduce using rule 43 (func_call -> ESCREVER ( STR ) .)


state 76

    (44) func_call -> NAME ( arg ) .

    )               reduce using rule 44 (func_call -> NAME ( arg ) .)
    ;               reduce using rule 44 (func_call -> NAME ( arg ) .)
    ,               reduce using rule 44 (func_call -> NAME ( arg ) .)
    ]               reduce using rule 44 (func_call -> NAME ( arg ) .)
    FIM             reduce using rule 44 (func_call -> NAME ( arg ) .)


state 77

    (31) elements -> element , elements .

    ]               reduce using rule 31 (elements -> element , elements .)


state 78

    (33) funcao -> NAME ( arg ) , . : func_call
    (34) funcao -> NAME ( arg ) , . : expression_ops

    :               shift and go to state 82


state 79

    (35) funcao -> NAME ( arg ) : . blocks
    (36) blocks -> . block
    (37) blocks -> . blocks block
    (38) block -> . variavel ;
    (39) block -> . expression_ops ;
    (40) block -> . func_call ;
    (12) variavel -> . VARIAVEL = expression
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )

    VARIAVEL        shift and go to state 88
    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    -               shift and go to state 23
    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27

    blocks                         shift and go to state 83
    block                          shift and go to state 84
    variavel                       shift and go to state 85
    expression_ops                 shift and go to state 86
    func_call                      shift and go to state 87

state 80

    (46) arg -> expression_ops , arg .

    )               reduce using rule 46 (arg -> expression_ops , arg .)


state 81

    (9) ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .

    ESCREVER        reduce using rule 9 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)
    FUNCAO          reduce using rule 9 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)
    VARIAVEL        reduce using rule 9 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)
    $end            reduce using rule 9 (ComandosIniciais -> VARIAVEL = ENTRADA ( ) ; .)


state 82

    (33) funcao -> NAME ( arg ) , : . func_call
    (34) funcao -> NAME ( arg ) , : . expression_ops
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops

    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27
    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    VARIAVEL        shift and go to state 38
    -               shift and go to state 23

    func_call                      shift and go to state 89
    expression_ops                 shift and go to state 90

state 83

    (35) funcao -> NAME ( arg ) : blocks .
    (37) blocks -> blocks . block
    (38) block -> . variavel ;
    (39) block -> . expression_ops ;
    (40) block -> . func_call ;
    (12) variavel -> . VARIAVEL = expression
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )

    FIM             reduce using rule 35 (funcao -> NAME ( arg ) : blocks .)
    ;               reduce using rule 35 (funcao -> NAME ( arg ) : blocks .)
    VARIAVEL        shift and go to state 88
    (               shift and go to state 16
    NUM             shift and go to state 24
    STR             shift and go to state 37
    -               shift and go to state 23
    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27

    block                          shift and go to state 91
    variavel                       shift and go to state 85
    expression_ops                 shift and go to state 86
    func_call                      shift and go to state 87

state 84

    (36) blocks -> block .

    VARIAVEL        reduce using rule 36 (blocks -> block .)
    (               reduce using rule 36 (blocks -> block .)
    NUM             reduce using rule 36 (blocks -> block .)
    STR             reduce using rule 36 (blocks -> block .)
    -               reduce using rule 36 (blocks -> block .)
    ALEATORIO       reduce using rule 36 (blocks -> block .)
    ESCREVER        reduce using rule 36 (blocks -> block .)
    NAME            reduce using rule 36 (blocks -> block .)
    FIM             reduce using rule 36 (blocks -> block .)
    ;               reduce using rule 36 (blocks -> block .)


state 85

    (38) block -> variavel . ;

    ;               shift and go to state 92


state 86

    (39) block -> expression_ops . ;
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    ;               shift and go to state 93
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    CONCAT          shift and go to state 44


state 87

    (40) block -> func_call . ;

    ;               shift and go to state 94


state 88

    (12) variavel -> VARIAVEL . = expression
    (26) expression_ops -> VARIAVEL .

    =               shift and go to state 95
    ;               reduce using rule 26 (expression_ops -> VARIAVEL .)
    +               reduce using rule 26 (expression_ops -> VARIAVEL .)
    -               reduce using rule 26 (expression_ops -> VARIAVEL .)
    *               reduce using rule 26 (expression_ops -> VARIAVEL .)
    /               reduce using rule 26 (expression_ops -> VARIAVEL .)
    CONCAT          reduce using rule 26 (expression_ops -> VARIAVEL .)


state 89

    (33) funcao -> NAME ( arg ) , : func_call .

    FIM             reduce using rule 33 (funcao -> NAME ( arg ) , : func_call .)
    ;               reduce using rule 33 (funcao -> NAME ( arg ) , : func_call .)


state 90

    (34) funcao -> NAME ( arg ) , : expression_ops .
    (18) expression_ops -> expression_ops . + expression_ops
    (19) expression_ops -> expression_ops . - expression_ops
    (20) expression_ops -> expression_ops . * expression_ops
    (21) expression_ops -> expression_ops . / expression_ops
    (22) expression_ops -> expression_ops . CONCAT expression_ops

    FIM             reduce using rule 34 (funcao -> NAME ( arg ) , : expression_ops .)
    ;               reduce using rule 34 (funcao -> NAME ( arg ) , : expression_ops .)
    +               shift and go to state 40
    -               shift and go to state 41
    *               shift and go to state 42
    /               shift and go to state 43
    CONCAT          shift and go to state 44


state 91

    (37) blocks -> blocks block .

    VARIAVEL        reduce using rule 37 (blocks -> blocks block .)
    (               reduce using rule 37 (blocks -> blocks block .)
    NUM             reduce using rule 37 (blocks -> blocks block .)
    STR             reduce using rule 37 (blocks -> blocks block .)
    -               reduce using rule 37 (blocks -> blocks block .)
    ALEATORIO       reduce using rule 37 (blocks -> blocks block .)
    ESCREVER        reduce using rule 37 (blocks -> blocks block .)
    NAME            reduce using rule 37 (blocks -> blocks block .)
    FIM             reduce using rule 37 (blocks -> blocks block .)
    ;               reduce using rule 37 (blocks -> blocks block .)


state 92

    (38) block -> variavel ; .

    VARIAVEL        reduce using rule 38 (block -> variavel ; .)
    (               reduce using rule 38 (block -> variavel ; .)
    NUM             reduce using rule 38 (block -> variavel ; .)
    STR             reduce using rule 38 (block -> variavel ; .)
    -               reduce using rule 38 (block -> variavel ; .)
    ALEATORIO       reduce using rule 38 (block -> variavel ; .)
    ESCREVER        reduce using rule 38 (block -> variavel ; .)
    NAME            reduce using rule 38 (block -> variavel ; .)
    FIM             reduce using rule 38 (block -> variavel ; .)
    ;               reduce using rule 38 (block -> variavel ; .)


state 93

    (39) block -> expression_ops ; .

    VARIAVEL        reduce using rule 39 (block -> expression_ops ; .)
    (               reduce using rule 39 (block -> expression_ops ; .)
    NUM             reduce using rule 39 (block -> expression_ops ; .)
    STR             reduce using rule 39 (block -> expression_ops ; .)
    -               reduce using rule 39 (block -> expression_ops ; .)
    ALEATORIO       reduce using rule 39 (block -> expression_ops ; .)
    ESCREVER        reduce using rule 39 (block -> expression_ops ; .)
    NAME            reduce using rule 39 (block -> expression_ops ; .)
    FIM             reduce using rule 39 (block -> expression_ops ; .)
    ;               reduce using rule 39 (block -> expression_ops ; .)


state 94

    (40) block -> func_call ; .

    VARIAVEL        reduce using rule 40 (block -> func_call ; .)
    (               reduce using rule 40 (block -> func_call ; .)
    NUM             reduce using rule 40 (block -> func_call ; .)
    STR             reduce using rule 40 (block -> func_call ; .)
    -               reduce using rule 40 (block -> func_call ; .)
    ALEATORIO       reduce using rule 40 (block -> func_call ; .)
    ESCREVER        reduce using rule 40 (block -> func_call ; .)
    NAME            reduce using rule 40 (block -> func_call ; .)
    FIM             reduce using rule 40 (block -> func_call ; .)
    ;               reduce using rule 40 (block -> func_call ; .)


state 95

    (12) variavel -> VARIAVEL = . expression
    (13) expression -> . expression_ops
    (14) expression -> . STR
    (15) expression -> . VARIAVEL
    (16) expression -> . func_call
    (17) expression -> . list
    (18) expression_ops -> . expression_ops + expression_ops
    (19) expression_ops -> . expression_ops - expression_ops
    (20) expression_ops -> . expression_ops * expression_ops
    (21) expression_ops -> . expression_ops / expression_ops
    (22) expression_ops -> . expression_ops CONCAT expression_ops
    (23) expression_ops -> . ( expression_ops )
    (24) expression_ops -> . NUM
    (25) expression_ops -> . STR
    (26) expression_ops -> . VARIAVEL
    (27) expression_ops -> . - expression_ops
    (41) func_call -> . ALEATORIO ( expression_ops )
    (42) func_call -> . ESCREVER ( expression_ops )
    (43) func_call -> . ESCREVER ( STR )
    (44) func_call -> . NAME ( arg )
    (28) list -> . [ elements ]
    (29) list -> . [ ]

    STR             shift and go to state 19
    VARIAVEL        shift and go to state 20
    (               shift and go to state 16
    NUM             shift and go to state 24
    -               shift and go to state 23
    ALEATORIO       shift and go to state 25
    ESCREVER        shift and go to state 26
    NAME            shift and go to state 27
    [               shift and go to state 28

    expression                     shift and go to state 35
    expression_ops                 shift and go to state 18
    func_call                      shift and go to state 21
    list                           shift and go to state 22
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ; in state 32 resolved as shift
WARNING: shift/reduce conflict for ; in state 34 resolved as shift
WARNING: shift/reduce conflict for ) in state 66 resolved as shift
WARNING: reduce/reduce conflict in state 19 resolved using rule (expression -> STR)
WARNING: rejected rule (expression_ops -> STR) in state 19
WARNING: reduce/reduce conflict in state 20 resolved using rule (expression -> VARIAVEL)
WARNING: rejected rule (expression_ops -> VARIAVEL) in state 20
