
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftCONCATleft+-left*/rightUMINUSALEATORIO CONCAT ENTRADA ESCREVER FIM FUNCAO INTERPOLATED_STR NAME NUM STR VARIAVELRec : StartRec : Rec StartStart : ComandosIniciaisComandosIniciais : ESCREVER escrever ';'\n        | variavel ';'\n        | FUNCAO funcao FIM\n        | VARIAVEL '=' func_call ';'\n        | VARIAVEL '=' ENTRADA '(' ')' ';'\n        escrever : '(' expression ')'variavel : VARIAVEL '=' expressionexpression : expression_ops\n        | STR\n        | VARIAVELexpression_ops : expression_ops '+' expression_ops\n        | expression_ops '-' expression_ops\n        | expression_ops '*' expression_ops\n        | expression_ops '/' expression_ops\n        | expression_ops CONCAT expression_ops\n        | '(' expression_ops ')'\n        | NUM\n        | STR\n        | VARIAVELexpression_ops : '-' expression_ops %prec UMINUS\n        funcao : NAME '(' arg ')'\n        \n        func_call : ALEATORIO '(' expression_ops ')'\n        | ESCREVER '(' expression_ops ')'\n        | ESCREVER '(' STR ')'\n        \n        arg : NAME\n        | NAME ',' arg\n        "
    
_lr_action_items = {'ESCREVER':([0,1,2,3,8,11,14,15,23,42,59,],[4,4,-1,-3,-2,-5,29,-4,-6,-7,-8,]),'FUNCAO':([0,1,2,3,8,11,15,23,42,59,],[6,6,-1,-3,-2,-5,-4,-6,-7,-8,]),'VARIAVEL':([0,1,2,3,8,10,11,14,15,16,21,23,34,35,36,37,38,42,44,45,59,],[7,7,-1,-3,-2,20,-5,20,-4,32,32,-6,32,32,32,32,32,-7,32,32,-8,]),'$end':([1,2,3,8,11,15,23,42,59,],[0,-1,-3,-2,-5,-4,-6,-7,-8,]),'(':([4,10,13,14,16,21,26,28,29,34,35,36,37,38,44,45,],[10,16,24,16,16,16,43,44,45,16,16,16,16,16,16,16,]),';':([5,9,18,19,20,22,25,27,31,32,33,39,46,47,48,49,50,51,54,60,61,62,],[11,15,-11,-12,-13,-20,42,-10,-21,-22,-9,-23,-19,-14,-15,-16,-17,-18,59,-25,-26,-27,]),'NAME':([6,24,52,],[13,40,40,]),'=':([7,],[14,]),'STR':([10,14,16,21,34,35,36,37,38,44,45,],[19,19,31,31,31,31,31,31,31,31,57,]),'NUM':([10,14,16,21,34,35,36,37,38,44,45,],[22,22,22,22,22,22,22,22,22,22,22,]),'-':([10,14,16,18,19,20,21,22,30,31,32,34,35,36,37,38,39,44,45,46,47,48,49,50,51,55,56,57,],[21,21,21,35,-21,-22,21,-20,35,-21,-22,21,21,21,21,21,-23,21,21,-19,-14,-15,-16,-17,35,35,35,-21,]),'FIM':([12,53,],[23,-24,]),'ENTRADA':([14,],[26,]),'ALEATORIO':([14,],[28,]),')':([17,18,19,20,22,30,31,32,39,40,41,43,46,47,48,49,50,51,55,56,57,58,],[33,-11,-12,-13,-20,46,-21,-22,-23,-28,53,54,-19,-14,-15,-16,-17,-18,60,61,62,-29,]),'+':([18,19,20,22,30,31,32,39,46,47,48,49,50,51,55,56,57,],[34,-21,-22,-20,34,-21,-22,-23,-19,-14,-15,-16,-17,34,34,34,-21,]),'*':([18,19,20,22,30,31,32,39,46,47,48,49,50,51,55,56,57,],[36,-21,-22,-20,36,-21,-22,-23,-19,36,36,-16,-17,36,36,36,-21,]),'/':([18,19,20,22,30,31,32,39,46,47,48,49,50,51,55,56,57,],[37,-21,-22,-20,37,-21,-22,-23,-19,37,37,-16,-17,37,37,37,-21,]),'CONCAT':([18,19,20,22,30,31,32,39,46,47,48,49,50,51,55,56,57,],[38,-21,-22,-20,38,-21,-22,-23,-19,-14,-15,-16,-17,-18,38,38,-21,]),',':([40,],[52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Rec':([0,],[1,]),'Start':([0,1,],[2,8,]),'ComandosIniciais':([0,1,],[3,3,]),'variavel':([0,1,],[5,5,]),'escrever':([4,],[9,]),'funcao':([6,],[12,]),'expression':([10,14,],[17,27,]),'expression_ops':([10,14,16,21,34,35,36,37,38,44,45,],[18,18,30,39,47,48,49,50,51,55,56,]),'func_call':([14,],[25,]),'arg':([24,52,],[41,58,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Rec","S'",1,None,None,None),
  ('Rec -> Start','Rec',1,'p_Rec0','grammar.py',24),
  ('Rec -> Rec Start','Rec',2,'p_Rec1','grammar.py',28),
  ('Start -> ComandosIniciais','Start',1,'p_Start','grammar.py',33),
  ('ComandosIniciais -> ESCREVER escrever ;','ComandosIniciais',3,'p_ComandosIniciais','grammar.py',37),
  ('ComandosIniciais -> variavel ;','ComandosIniciais',2,'p_ComandosIniciais','grammar.py',38),
  ('ComandosIniciais -> FUNCAO funcao FIM','ComandosIniciais',3,'p_ComandosIniciais','grammar.py',39),
  ('ComandosIniciais -> VARIAVEL = func_call ;','ComandosIniciais',4,'p_ComandosIniciais','grammar.py',40),
  ('ComandosIniciais -> VARIAVEL = ENTRADA ( ) ;','ComandosIniciais',6,'p_ComandosIniciais','grammar.py',41),
  ('escrever -> ( expression )','escrever',3,'p_escrever','grammar.py',69),
  ('variavel -> VARIAVEL = expression','variavel',3,'p_variavel','grammar.py',73),
  ('expression -> expression_ops','expression',1,'p_expression','grammar.py',79),
  ('expression -> STR','expression',1,'p_expression','grammar.py',80),
  ('expression -> VARIAVEL','expression',1,'p_expression','grammar.py',81),
  ('expression_ops -> expression_ops + expression_ops','expression_ops',3,'p_expression_ops','grammar.py',88),
  ('expression_ops -> expression_ops - expression_ops','expression_ops',3,'p_expression_ops','grammar.py',89),
  ('expression_ops -> expression_ops * expression_ops','expression_ops',3,'p_expression_ops','grammar.py',90),
  ('expression_ops -> expression_ops / expression_ops','expression_ops',3,'p_expression_ops','grammar.py',91),
  ('expression_ops -> expression_ops CONCAT expression_ops','expression_ops',3,'p_expression_ops','grammar.py',92),
  ('expression_ops -> ( expression_ops )','expression_ops',3,'p_expression_ops','grammar.py',93),
  ('expression_ops -> NUM','expression_ops',1,'p_expression_ops','grammar.py',94),
  ('expression_ops -> STR','expression_ops',1,'p_expression_ops','grammar.py',95),
  ('expression_ops -> VARIAVEL','expression_ops',1,'p_expression_ops','grammar.py',96),
  ('expression_ops -> - expression_ops','expression_ops',2,'p_expression_uminus','grammar.py',137),
  ('funcao -> NAME ( arg )','funcao',4,'p_funcao','grammar.py',142),
  ('func_call -> ALEATORIO ( expression_ops )','func_call',4,'p_func_call','grammar.py',148),
  ('func_call -> ESCREVER ( expression_ops )','func_call',4,'p_func_call','grammar.py',149),
  ('func_call -> ESCREVER ( STR )','func_call',4,'p_func_call','grammar.py',150),
  ('arg -> NAME','arg',1,'p_arg','grammar.py',161),
  ('arg -> NAME , arg','arg',3,'p_arg','grammar.py',162),
]
