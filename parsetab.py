# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = "3.10"

_lr_method = "LALR"

_lr_signature = "leftCONCATleft+-left*/rightUMINUSALEATORIO CONCAT ENTRADA ESCREVER FIM FUNCAO NAME NUM STR VARIAVELRec : StartRec : Rec StartStart : ComandosIniciais\n        ComandosIniciais : ESCREVER escrever ';'\n            | variavel ';'\n            | FUNCAO funcao FIM\n            | FUNCAO funcao ';'\n            | VARIAVEL '=' func_call ';'\n            | VARIAVEL '=' ENTRADA '(' ')' ';'\n            | VARIAVEL '=' list ';'\n        escrever : '(' expression ')'variavel : VARIAVEL '=' expression\n        expression : expression_ops\n            | STR\n            | VARIAVEL\n            | func_call\n            | list\n        \n        expression_ops : expression_ops '+' expression_ops\n            | expression_ops '-' expression_ops\n            | expression_ops '*' expression_ops\n            | expression_ops '/' expression_ops\n            | expression_ops CONCAT expression_ops\n            | '(' expression_ops ')'\n            | NUM\n            | STR\n            | VARIAVEL\n        expression_ops : '-' expression_ops %prec UMINUS\n        list : '[' elements ']'\n            | '[' ']'\n        \n        elements : element\n            | element ',' elements\n        element : expression\n        funcao : NAME '(' arg ')' ',' ':' func_call\n            | NAME '(' arg ')' ',' ':' expression_ops\n            | NAME '(' arg ')' ':' blocks\n        \n        blocks : block\n            | blocks block\n        \n        block : variavel ';'\n            | expression_ops ';'\n            | func_call ';'\n        \n        func_call : ALEATORIO '(' expression_ops ')'\n            | ESCREVER '(' expression_ops ')'\n            | ESCREVER '(' STR ')'\n            | NAME '(' arg ')'\n        \n        arg : expression_ops\n            | expression_ops ',' arg\n        "

_lr_action_items = {
    "ESCREVER": (
        [
            0,
            1,
            2,
            3,
            8,
            10,
            11,
            14,
            15,
            28,
            29,
            30,
            55,
            57,
            69,
            79,
            81,
            82,
            83,
            84,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            4,
            4,
            -1,
            -3,
            -2,
            26,
            -5,
            26,
            -4,
            26,
            -6,
            -7,
            -8,
            -10,
            26,
            26,
            -9,
            26,
            26,
            -36,
            -37,
            -38,
            -39,
            -40,
            26,
        ],
    ),
    "FUNCAO": (
        [
            0,
            1,
            2,
            3,
            8,
            11,
            15,
            29,
            30,
            55,
            57,
            81,
        ],
        [
            6,
            6,
            -1,
            -3,
            -2,
            -5,
            -4,
            -6,
            -7,
            -8,
            -10,
            -9,
        ],
    ),
    "VARIAVEL": (
        [
            0,
            1,
            2,
            3,
            8,
            10,
            11,
            14,
            15,
            16,
            23,
            28,
            29,
            30,
            31,
            40,
            41,
            42,
            43,
            44,
            46,
            47,
            48,
            55,
            57,
            69,
            71,
            79,
            81,
            82,
            83,
            84,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            7,
            7,
            -1,
            -3,
            -2,
            20,
            -5,
            20,
            -4,
            38,
            38,
            20,
            -6,
            -7,
            38,
            38,
            38,
            38,
            38,
            38,
            38,
            38,
            38,
            -8,
            -10,
            20,
            38,
            88,
            -9,
            38,
            88,
            -36,
            -37,
            -38,
            -39,
            -40,
            20,
        ],
    ),
    "$end": (
        [
            1,
            2,
            3,
            8,
            11,
            15,
            29,
            30,
            55,
            57,
            81,
        ],
        [
            0,
            -1,
            -3,
            -2,
            -5,
            -4,
            -6,
            -7,
            -8,
            -10,
            -9,
        ],
    ),
    "(": (
        [
            4,
            10,
            13,
            14,
            16,
            23,
            25,
            26,
            27,
            28,
            31,
            33,
            40,
            41,
            42,
            43,
            44,
            46,
            47,
            48,
            69,
            71,
            79,
            82,
            83,
            84,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            10,
            16,
            31,
            16,
            16,
            16,
            46,
            47,
            48,
            16,
            16,
            56,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            16,
            -36,
            -37,
            -38,
            -39,
            -40,
            16,
        ],
    ),
    ";": (
        [
            5,
            9,
            12,
            18,
            19,
            20,
            21,
            22,
            24,
            32,
            34,
            35,
            37,
            38,
            39,
            45,
            50,
            58,
            59,
            60,
            61,
            62,
            63,
            68,
            72,
            73,
            74,
            75,
            76,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            91,
            92,
            93,
            94,
        ],
        [
            11,
            15,
            30,
            -13,
            -14,
            -15,
            -16,
            -17,
            -24,
            55,
            57,
            -12,
            -25,
            -26,
            -11,
            -27,
            -29,
            -23,
            -18,
            -19,
            -20,
            -21,
            -22,
            -28,
            81,
            -41,
            -42,
            -43,
            -44,
            -35,
            -36,
            92,
            93,
            94,
            -26,
            -33,
            -34,
            -37,
            -38,
            -39,
            -40,
        ],
    ),
    "NAME": (
        [
            6,
            10,
            14,
            28,
            69,
            79,
            82,
            83,
            84,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            13,
            27,
            27,
            27,
            27,
            27,
            27,
            27,
            -36,
            -37,
            -38,
            -39,
            -40,
            27,
        ],
    ),
    "=": (
        [
            7,
            88,
        ],
        [
            14,
            95,
        ],
    ),
    "STR": (
        [
            10,
            14,
            16,
            23,
            28,
            31,
            40,
            41,
            42,
            43,
            44,
            46,
            47,
            48,
            69,
            71,
            79,
            82,
            83,
            84,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            19,
            19,
            37,
            37,
            19,
            37,
            37,
            37,
            37,
            37,
            37,
            37,
            66,
            37,
            19,
            37,
            37,
            37,
            37,
            -36,
            -37,
            -38,
            -39,
            -40,
            19,
        ],
    ),
    "NUM": (
        [
            10,
            14,
            16,
            23,
            28,
            31,
            40,
            41,
            42,
            43,
            44,
            46,
            47,
            48,
            69,
            71,
            79,
            82,
            83,
            84,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            24,
            -36,
            -37,
            -38,
            -39,
            -40,
            24,
        ],
    ),
    "-": (
        [
            10,
            14,
            16,
            18,
            19,
            20,
            23,
            24,
            28,
            31,
            36,
            37,
            38,
            40,
            41,
            42,
            43,
            44,
            45,
            46,
            47,
            48,
            54,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            69,
            71,
            79,
            82,
            83,
            84,
            86,
            88,
            90,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            23,
            23,
            23,
            41,
            -25,
            -26,
            23,
            -24,
            23,
            23,
            41,
            -25,
            -26,
            23,
            23,
            23,
            23,
            23,
            -27,
            23,
            23,
            23,
            41,
            -23,
            -18,
            -19,
            -20,
            -21,
            41,
            41,
            41,
            -25,
            23,
            23,
            23,
            23,
            23,
            -36,
            41,
            -26,
            41,
            -37,
            -38,
            -39,
            -40,
            23,
        ],
    ),
    "ALEATORIO": (
        [
            10,
            14,
            28,
            69,
            79,
            82,
            83,
            84,
            91,
            92,
            93,
            94,
            95,
        ],
        [
            25,
            25,
            25,
            25,
            25,
            25,
            25,
            -36,
            -37,
            -38,
            -39,
            -40,
            25,
        ],
    ),
    "[": (
        [
            10,
            14,
            28,
            69,
            95,
        ],
        [
            28,
            28,
            28,
            28,
            28,
        ],
    ),
    "FIM": (
        [
            12,
            24,
            37,
            38,
            45,
            58,
            59,
            60,
            61,
            62,
            63,
            73,
            74,
            75,
            76,
            83,
            84,
            89,
            90,
            91,
            92,
            93,
            94,
        ],
        [
            29,
            -24,
            -25,
            -26,
            -27,
            -23,
            -18,
            -19,
            -20,
            -21,
            -22,
            -41,
            -42,
            -43,
            -44,
            -35,
            -36,
            -33,
            -34,
            -37,
            -38,
            -39,
            -40,
        ],
    ),
    "ENTRADA": (
        [
            14,
        ],
        [
            33,
        ],
    ),
    ")": (
        [
            17,
            18,
            19,
            20,
            21,
            22,
            24,
            36,
            37,
            38,
            45,
            50,
            53,
            54,
            56,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            67,
            68,
            73,
            74,
            75,
            76,
            80,
        ],
        [
            39,
            -13,
            -14,
            -15,
            -16,
            -17,
            -24,
            58,
            -25,
            -26,
            -27,
            -29,
            70,
            -45,
            72,
            -23,
            -18,
            -19,
            -20,
            -21,
            -22,
            73,
            74,
            75,
            76,
            -28,
            -41,
            -42,
            -43,
            -44,
            -46,
        ],
    ),
    ",": (
        [
            18,
            19,
            20,
            21,
            22,
            24,
            37,
            38,
            45,
            50,
            51,
            52,
            54,
            58,
            59,
            60,
            61,
            62,
            63,
            68,
            70,
            73,
            74,
            75,
            76,
        ],
        [
            -13,
            -14,
            -15,
            -16,
            -17,
            -24,
            -25,
            -26,
            -27,
            -29,
            69,
            -32,
            71,
            -23,
            -18,
            -19,
            -20,
            -21,
            -22,
            -28,
            78,
            -41,
            -42,
            -43,
            -44,
        ],
    ),
    "]": (
        [
            18,
            19,
            20,
            21,
            22,
            24,
            28,
            37,
            38,
            45,
            49,
            50,
            51,
            52,
            58,
            59,
            60,
            61,
            62,
            63,
            68,
            73,
            74,
            75,
            76,
            77,
        ],
        [
            -13,
            -14,
            -15,
            -16,
            -17,
            -24,
            50,
            -25,
            -26,
            -27,
            68,
            -29,
            -30,
            -32,
            -23,
            -18,
            -19,
            -20,
            -21,
            -22,
            -28,
            -41,
            -42,
            -43,
            -44,
            -31,
        ],
    ),
    "+": (
        [
            18,
            19,
            20,
            24,
            36,
            37,
            38,
            45,
            54,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            86,
            88,
            90,
        ],
        [
            40,
            -25,
            -26,
            -24,
            40,
            -25,
            -26,
            -27,
            40,
            -23,
            -18,
            -19,
            -20,
            -21,
            40,
            40,
            40,
            -25,
            40,
            -26,
            40,
        ],
    ),
    "*": (
        [
            18,
            19,
            20,
            24,
            36,
            37,
            38,
            45,
            54,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            86,
            88,
            90,
        ],
        [
            42,
            -25,
            -26,
            -24,
            42,
            -25,
            -26,
            -27,
            42,
            -23,
            42,
            42,
            -20,
            -21,
            42,
            42,
            42,
            -25,
            42,
            -26,
            42,
        ],
    ),
    "/": (
        [
            18,
            19,
            20,
            24,
            36,
            37,
            38,
            45,
            54,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            86,
            88,
            90,
        ],
        [
            43,
            -25,
            -26,
            -24,
            43,
            -25,
            -26,
            -27,
            43,
            -23,
            43,
            43,
            -20,
            -21,
            43,
            43,
            43,
            -25,
            43,
            -26,
            43,
        ],
    ),
    "CONCAT": (
        [
            18,
            19,
            20,
            24,
            36,
            37,
            38,
            45,
            54,
            58,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            66,
            86,
            88,
            90,
        ],
        [
            44,
            -25,
            -26,
            -24,
            44,
            -25,
            -26,
            -27,
            44,
            -23,
            -18,
            -19,
            -20,
            -21,
            -22,
            44,
            44,
            -25,
            44,
            -26,
            44,
        ],
    ),
    ":": (
        [
            70,
            78,
        ],
        [
            79,
            82,
        ],
    ),
}

_lr_action = {}
for _k, _v in _lr_action_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_action:
            _lr_action[_x] = {}
        _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {
    "Rec": (
        [
            0,
        ],
        [
            1,
        ],
    ),
    "Start": (
        [
            0,
            1,
        ],
        [
            2,
            8,
        ],
    ),
    "ComandosIniciais": (
        [
            0,
            1,
        ],
        [
            3,
            3,
        ],
    ),
    "variavel": (
        [
            0,
            1,
            79,
            83,
        ],
        [
            5,
            5,
            85,
            85,
        ],
    ),
    "escrever": (
        [
            4,
        ],
        [
            9,
        ],
    ),
    "funcao": (
        [
            6,
        ],
        [
            12,
        ],
    ),
    "expression": (
        [
            10,
            14,
            28,
            69,
            95,
        ],
        [
            17,
            35,
            52,
            52,
            35,
        ],
    ),
    "expression_ops": (
        [
            10,
            14,
            16,
            23,
            28,
            31,
            40,
            41,
            42,
            43,
            44,
            46,
            47,
            48,
            69,
            71,
            79,
            82,
            83,
            95,
        ],
        [
            18,
            18,
            36,
            45,
            18,
            54,
            59,
            60,
            61,
            62,
            63,
            64,
            65,
            54,
            18,
            54,
            86,
            90,
            86,
            18,
        ],
    ),
    "func_call": (
        [
            10,
            14,
            28,
            69,
            79,
            82,
            83,
            95,
        ],
        [
            21,
            32,
            21,
            21,
            87,
            89,
            87,
            21,
        ],
    ),
    "list": (
        [
            10,
            14,
            28,
            69,
            95,
        ],
        [
            22,
            34,
            22,
            22,
            22,
        ],
    ),
    "elements": (
        [
            28,
            69,
        ],
        [
            49,
            77,
        ],
    ),
    "element": (
        [
            28,
            69,
        ],
        [
            51,
            51,
        ],
    ),
    "arg": (
        [
            31,
            48,
            71,
        ],
        [
            53,
            67,
            80,
        ],
    ),
    "blocks": (
        [
            79,
        ],
        [
            83,
        ],
    ),
    "block": (
        [
            79,
            83,
        ],
        [
            84,
            91,
        ],
    ),
}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
    for _x, _y in zip(_v[0], _v[1]):
        if not _x in _lr_goto:
            _lr_goto[_x] = {}
        _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
    ("S' -> Rec", "S'", 1, None, None, None),
    ("Rec -> Start", "Rec", 1, "p_Rec0", "grammar.py", 24),
    ("Rec -> Rec Start", "Rec", 2, "p_Rec1", "grammar.py", 28),
    ("Start -> ComandosIniciais", "Start", 1, "p_Start", "grammar.py", 33),
    (
        "ComandosIniciais -> ESCREVER escrever ;",
        "ComandosIniciais",
        3,
        "p_ComandosIniciais",
        "grammar.py",
        38,
    ),
    (
        "ComandosIniciais -> variavel ;",
        "ComandosIniciais",
        2,
        "p_ComandosIniciais",
        "grammar.py",
        39,
    ),
    (
        "ComandosIniciais -> FUNCAO funcao FIM",
        "ComandosIniciais",
        3,
        "p_ComandosIniciais",
        "grammar.py",
        40,
    ),
    (
        "ComandosIniciais -> FUNCAO funcao ;",
        "ComandosIniciais",
        3,
        "p_ComandosIniciais",
        "grammar.py",
        41,
    ),
    (
        "ComandosIniciais -> VARIAVEL = func_call ;",
        "ComandosIniciais",
        4,
        "p_ComandosIniciais",
        "grammar.py",
        42,
    ),
    (
        "ComandosIniciais -> VARIAVEL = ENTRADA ( ) ;",
        "ComandosIniciais",
        6,
        "p_ComandosIniciais",
        "grammar.py",
        43,
    ),
    (
        "ComandosIniciais -> VARIAVEL = list ;",
        "ComandosIniciais",
        4,
        "p_ComandosIniciais",
        "grammar.py",
        44,
    ),
    ("escrever -> ( expression )", "escrever", 3, "p_escrever", "grammar.py", 89),
    (
        "variavel -> VARIAVEL = expression",
        "variavel",
        3,
        "p_variavel",
        "grammar.py",
        93,
    ),
    (
        "expression -> expression_ops",
        "expression",
        1,
        "p_expression",
        "grammar.py",
        100,
    ),
    ("expression -> STR", "expression", 1, "p_expression", "grammar.py", 101),
    ("expression -> VARIAVEL", "expression", 1, "p_expression", "grammar.py", 102),
    ("expression -> func_call", "expression", 1, "p_expression", "grammar.py", 103),
    ("expression -> list", "expression", 1, "p_expression", "grammar.py", 104),
    (
        "expression_ops -> expression_ops + expression_ops",
        "expression_ops",
        3,
        "p_expression_ops",
        "grammar.py",
        115,
    ),
    (
        "expression_ops -> expression_ops - expression_ops",
        "expression_ops",
        3,
        "p_expression_ops",
        "grammar.py",
        116,
    ),
    (
        "expression_ops -> expression_ops * expression_ops",
        "expression_ops",
        3,
        "p_expression_ops",
        "grammar.py",
        117,
    ),
    (
        "expression_ops -> expression_ops / expression_ops",
        "expression_ops",
        3,
        "p_expression_ops",
        "grammar.py",
        118,
    ),
    (
        "expression_ops -> expression_ops CONCAT expression_ops",
        "expression_ops",
        3,
        "p_expression_ops",
        "grammar.py",
        119,
    ),
    (
        "expression_ops -> ( expression_ops )",
        "expression_ops",
        3,
        "p_expression_ops",
        "grammar.py",
        120,
    ),
    (
        "expression_ops -> NUM",
        "expression_ops",
        1,
        "p_expression_ops",
        "grammar.py",
        121,
    ),
    (
        "expression_ops -> STR",
        "expression_ops",
        1,
        "p_expression_ops",
        "grammar.py",
        122,
    ),
    (
        "expression_ops -> VARIAVEL",
        "expression_ops",
        1,
        "p_expression_ops",
        "grammar.py",
        123,
    ),
    (
        "expression_ops -> - expression_ops",
        "expression_ops",
        2,
        "p_expressao_uminus",
        "grammar.py",
        133,
    ),
    ("list -> [ elements ]", "list", 3, "p_list", "grammar.py", 138),
    ("list -> [ ]", "list", 2, "p_list", "grammar.py", 139),
    ("elements -> element", "elements", 1, "p_elements", "grammar.py", 148),
    ("elements -> element , elements", "elements", 3, "p_elements", "grammar.py", 149),
    ("element -> expression", "element", 1, "p_element", "grammar.py", 157),
    (
        "funcao -> NAME ( arg ) , : func_call",
        "funcao",
        7,
        "p_funcao",
        "grammar.py",
        162,
    ),
    (
        "funcao -> NAME ( arg ) , : expression_ops",
        "funcao",
        7,
        "p_funcao",
        "grammar.py",
        163,
    ),
    ("funcao -> NAME ( arg ) : blocks", "funcao", 6, "p_funcao", "grammar.py", 164),
    ("blocks -> block", "blocks", 1, "p_blocks", "grammar.py", 175),
    ("blocks -> blocks block", "blocks", 2, "p_blocks", "grammar.py", 176),
    ("block -> variavel ;", "block", 2, "p_block", "grammar.py", 185),
    ("block -> expression_ops ;", "block", 2, "p_block", "grammar.py", 186),
    ("block -> func_call ;", "block", 2, "p_block", "grammar.py", 187),
    (
        "func_call -> ALEATORIO ( expression_ops )",
        "func_call",
        4,
        "p_func_call",
        "grammar.py",
        193,
    ),
    (
        "func_call -> ESCREVER ( expression_ops )",
        "func_call",
        4,
        "p_func_call",
        "grammar.py",
        194,
    ),
    ("func_call -> ESCREVER ( STR )", "func_call", 4, "p_func_call", "grammar.py", 195),
    ("func_call -> NAME ( arg )", "func_call", 4, "p_func_call", "grammar.py", 196),
    ("arg -> expression_ops", "arg", 1, "p_arg", "grammar.py", 202),
    ("arg -> expression_ops , arg", "arg", 3, "p_arg", "grammar.py", 203),
]
